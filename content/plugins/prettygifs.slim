Bundle: 1
Edition: performance
Tagline: Get rid of ugly .NET GIFs, and get photoshop-like results for GIFs and 8-bit PNG images. Uses tuned octree quantization and smart, adjustable dithering.
Libs: twentytwenty


h1 PrettyGifs plugin
p Replaces .NET's disgusting default GIF encoding algorithm with Octree quantization and dithering, and allows 8-bit PNG creation. Compatible with all plugins.




.twentytwenty-container
  img src="http://z.zr.io/rw/pluginexamples/sunflower-websafe-ps.gif"
  img src="http://z.zr.io/rw/pluginexamples/sunflower.jpg?format=gif&colors=216&dither=4pass&preservePalette=false"


p
  strong Before/Left:
  | Simulated 216 Web Pallette
p
  strong After/Right:
  | PrettyGifs format = gif, colors = 216, dither = 4pass, preservePalette = false

h2 Installation
p
  | Either run
  code Install-Package ImageResizer.Plugins.PrettyGifs
  | in the NuGet package manager, or:
ol
  li Add ImageResizer.Plugins.PrettyGifs to your project
  li
    | Add
    code &lt;add name=&quot;PrettyGifs&quot; /&gt;
    | inside
    code &lt;resizer&gt;&lt;plugins&gt;&lt;/plugins&gt;&lt;/resizer&gt;
    | in Web.config.
h2 Supported querystring commands
ul
  li 
  	| colors=2-256
  li
  	| dither=true|4pass
  li
  	| preservePalette=true|false - If true, will attempt to use the original palette if present instead of recalculating it.
h2
  | Why not 
  a href="http://nquant.codeplex.com" nQuant
    
p A) On an informal test, it was 10x slower than the Octree algorithm on a 256x256 PNG. I.e, 1900ms vs 195ms. It also took 80MB of ram, while Octree took kilobytes.
p
  | B) It intrinsically requires 50MB ((32^4)x(6x8)=50,331,648 bytes) of ram per encode *just to store the histogram information for any size file*. This is an intrinsic limitation of
  a href="http://www.ece.mcmaster.ca/~xwu/cq.c" Versus kilobytes for the Octree algorithm.
p C) Only works for PNG files, it's designed for a multi-bit alpha channel. I could fix that, though.
p D) The nQuant implementation also makes excessive copies of the image, making it scale poorly. For example, on a 1300x840 PNG, nuQuant took 18.8 seconds and 110-130MB of ram, while Octree took 0.3 seconds and 4-8MB of RAM. This is also fixable, I believe.
a href="http://pngnq.sourceforge.net/index.html"
a href="http://members.ozemail.com.au/~dekker/NEUQUANT.HTML"

/ link rel="stylesheet" src="/css/twentytwenty.css"
/ script type="text/javascript" src="/js/jquery-1.9.1.js"
/ script type="text/javascript" src="/js/jquery.event.move.js"
/ script type="text/javascript" src="/js/jquery.twentytwenty.js"
javascript:
  $(document).load(function(){
  	$(".twentytwenty-container").twentytwenty({default_offset_pct: 0.3});
  });
