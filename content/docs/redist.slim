Icon: link
Sidebar: false

h1 Redistribution and CMS Integration guide

.title: h2 Bundling ImageResizer Essential Edition with your CMS, module, or library

.well
  h3
    | We encourage content management systems, modules, and other libraries to freely include and redistribute ImageResizer Essential Edition. Email your project URL to `support@imageresizing.net` and  
    a href="/docs/community" we will list you on the Community page. 
    | With advance notice, we can also verify if you are integrating ImageResizer properly. 

.row
  .span3

    h2 Flexible licensing
    markdown:
      We understand many component developers wish to avoid having multiple licenses for different parts of their system. We are always willing to work with developers and vendors to eliminate licensing mismatch, and we're generally open to sublicensing parts of Essential Edition or [relicesning under any OSI-approved license](http://opensource.org/licenses), including the GPL, LGPL, AGPL, MIT, MSD, Apache, CDDL, MPL, or EPL. 
      
      Please email `support@imageresizing.net` for assistance in figuring out the best licensing solution. If in doubt, you can always redistribute them under the [Freedom license](/licenses/freedom), which is based on the MIT license, but adds an additional restriction.
  .span3
    h2 What about caching? 

    markdown:
      TinyCache is a lighter version of DiskCache, suitable for small websites and projects which aren't photo heavy.

      TinyCache offers a fixed-size (30MB), disk-persisted memory cache. The average size of a resized image is 30KB, so TinyCache can generally store the 1,000 most popular image variations. We reccommend that websites with over a few hundred images upgrade to DiskCache, which is designed to cache millions of images.

      TinyCache is not yet a part of ImageResizer Essential Edition, but we're looking for partners willing to experiment with it. 

  .span3
    h2 Play nice with others
    ul.star_list
      li Ensure other plugins can still be installed, used, and activated. 
      li Don't break RIAPI compliance (riapi.org). Content portability is important, and standardization is a good thing. Feel free to add new features and commands, but please leave existing functionality under the existing URL syntax.
      li Tell your users that you use ImageResizer, and that performance and functionality upgrades are available at http://imageresizing.net/licenses
  .span3
    h2 Things to avoid
    ul.cross_list
      li Replacing the URL API with your own syntax, so other plugins can't be used.
      li Inventing your own caching system that doesn't scale or handle threading and file access properly.
      li Using MVC, WebAPI, or a HttpHandler to serve dynamic images instead of the HttpHandler (uploads are fine).
      li Redistributing a custom version of the core ImageResizer.dll library, so users can't upgrade.
      li Resigning the ImageResizer dlls and not providing binding redirects for new releases (signing is bad, OK?).

hr



.title: h2 Bundling ImageResizer Performance, Creative, or Elite Edition
.row

  .span3
    h2 Royalty-free OEM
    markdown:
      We offer royalty-free OEM licenses to component vendors who meet our criteria, for a very affordable yearly rate.

      These [OEM licenses generally permit use of ImageResizer plugins by all paying customers of the vendor](/licenses/oem).

      Please contact us for more details at `sales@imageresizing.net`.

  .span3
    h2 Distributing trials
    markdown:
      We allow vendors to distribute trial versions of the Performance and Creative edition plugins. This allows vendors to demonstrate the abilities of their product and the integration, and permits users to upgrade with a single license key.

      Email `sales@imageresizing.net` for details.
  .span3
    h2 Per-sale bundling
    markdown:
      We offer an IPN-compatible transaction API, allowing you to resell ImageResizer editions as part of a larger product offering. Clients will receive the same license, license keys, and licensing portal as they would if they were purchasing directly from us.

      E-mail `sales@imageresizing.net` for details.
  .span3
    h2 Bespoke Software
    markdown:
      The [ImageResizer Elite Edition](/plugins/editions/elite) and all [Support Contracts](/support/contracts) allow you to issue a [Professional Client](/licenses/proclient) license for a bespoke software project that you are both providing and maintaining. 

      Thus, if you are only providing your system as part of customized projects that you maintain, you do not need any special licensing.

      Please note, however, that the Professional Client license is only valid while the primary license holder is responsible for development and maintenance.

.title: h2 CMS Integration Notes

markdown:
  ### File delivery

  While most CMSes offer customized systems for file delivery, those systems are not optimized for dynamic image processing or disk caching. To achieve scalability and good performance, you should install the ImageResizer HttpModule in Web.Config and use it in the reccomended fashion. URL rewriting, caching configuration, and authorization systems are all accessible through events exposed by the Config.Pipeline class.


  ### File storage

  ImageResizer offers plugins for every kind of blob, file, and database storage location. If an existing plugin doesn't meet your needs, it's easy to implement IVirtualImageProvider and plug ImageResizer into your existing file provider system. In fact, if your CMS (like most) already supports the ASP.NET VirtualPathProvider system, ImageResizer will automatically connect.

  ### Uploads

  Uploads can be accepted in a variety of ways; postback, MVC, WebAPI, HttpHandler - ImageResizer doesn't care. We suggest ensuring whitelist-based character and extension sanitization, and reccomend GUID filenames to prevent concurrency bugs. 

  You may also consider sending uploads directly to blob storage, using the appropriate blob storage API. This will take load off your application servers, and ImageResizer can process the images dynamically as requested.


  ### URL API

  ImageResizer offers a highly-refined URL API, developed over 6 years through thousands of customer interactions. If you wish to limit attack surface, we offer many ways to accomplish that without breaking API compatibility or reducing functionality.

  ### Authentication

  ImageResizer is compatible with any AuthorizeRequest level authentication and authorization logic, and is also UrlAuthorization compatible. 

  ### User Interface

  ImageResizer's standardized URL API means many jQuery plugins can take advantage of it. [StudioJS offers a in-browser image editing experience](https://github.com/nathanaeljones/studiojs), along with lower-level APIs for custom solutions. It's [possible to integrate ImageResizer and jCrop in 11 lines of javascript](http://www.nathanaeljones.com/blog/2011/combining-jcrop-and-server-side-image-resizing).

  The [ImageResizer Community page](/docs/community) lists dozens of plugins, jQuery plugins, and CMS modules that you might find helpful.
